name: Appium CI

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Set APK Path
        run: echo "APK_PATH=$(echo $GITHUB_WORKSPACE)/app/app-koalaLabs-staging-release.apk" >> $GITHUB_ENV

      - name: Install AVD files
        run: |
          yes | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-34;default;x86_64'
          yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses

      - name: Create Android emulator
        run: |
          echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n Pixel_API_34_AOSP -d pixel --package 'system-images;android-34;default;x86_64' --force
          emulator_config=~/.android/avd/Pixel_API_34_AOSP.avd/config.ini
          sed -i .bak 's/hw.lcd.density=.*/hw.lcd.density=420/' "$emulator_config"
          sed -i .bak 's/hw.lcd.height=.*/hw.lcd.height=1920/' "$emulator_config"
          sed -i .bak 's/hw.lcd.width=.*/hw.lcd.width=1080/' "$emulator_config"
          if ! grep -q "hw.lcd.density" "$emulator_config"; then
            echo "hw.lcd.density=420" >> "$emulator_config"
          fi
          if ! grep -q "hw.lcd.height" "$emulator_config"; then
            echo "hw.lcd.height=1920" >> "$emulator_config"
          fi
          if ! grep -q "hw.lcd.width" "$emulator_config"; then
            echo "hw.lcd.width=1080" >> "$emulator_config"
          fi

      - name: Start Android emulator
        run: |
          nohup $ANDROID_HOME/emulator/emulator -avd Pixel_API_34_AOSP -no-snapshot -no-window -no-audio -no-boot-anim -camera-back none -camera-front none -qemu -m 2048 > /dev/null 2>&1 &
          $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'

      - name: Install Appium
        run: |
          sudo npm install -g appium
          sudo npm install -g appium@1.22.3
          sudo npm install -g appium-doctor

      - name: Download and Setup ChromeDriver for macOS
        run: |
          CHROMEDRIVER_VERSION=113.0.5672.63
          wget https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_mac64.zip
          unzip chromedriver_mac64.zip
          sudo mv chromedriver /usr/local/bin/chromedriver
          sudo chmod +x /usr/local/bin/chromedriver

      - name: Start Appium Server with ChromeDriver Autodownload
        run: appium --allow-insecure chromedriver_autodownload --chromedriver-executable /usr/local/bin/chromedriver & appium-doctor
      - name: Check Appium Server
        run: pgrep -f "appium" || echo "Appium server is not running"

      - name: Run TestNG Tests
        run: mvn test

      - name: Send Slack notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          GITHUB_RUN_URL: ${{ github.run_url }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"Tests have completed running on GitHub Actions. See the workflow run at: $GITHUB_RUN_URL\"}" $SLACK_WEBHOOK_URL


      - name: Report test results to TestRail
        env:
          TESTRAIL_URL: ${{ secrets.TESTRAIL_URL }}
          TESTRAIL_USERNAME: ${{ secrets.TESTRAIL_USERNAME }}
          TESTRAIL_PASSWORD: ${{ secrets.TESTRAIL_PASSWORD }}
          TESTRAIL_PROJECT_ID: 44
        run: mvn testrail:results
